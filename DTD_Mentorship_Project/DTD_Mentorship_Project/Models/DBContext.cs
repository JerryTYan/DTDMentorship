// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DTD_Mentorship_Project.Models;

public partial class DBContext : DbContext
{
    public DBContext(DbContextOptions<DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Availability> Availabilities { get; set; }

    public virtual DbSet<FieldOfWork> FieldOfWorks { get; set; }

    public virtual DbSet<Identity> Identities { get; set; }

    public virtual DbSet<MentorMentee> MentorMentees { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=DB;Integrated Security=true");

        modelBuilder.Entity<Address>(entity =>
        {
            entity.ToTable("Address");

            entity.Property(e => e.City).HasMaxLength(200);
            entity.Property(e => e.State).HasMaxLength(200);
            entity.Property(e => e.StreetAddress).HasMaxLength(200);
            entity.Property(e => e.ZipCode).HasMaxLength(200);
        });

        modelBuilder.Entity<Availability>(entity =>
        {
            entity.ToTable("Availability");

            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Availabilities)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_ID");
        });

        modelBuilder.Entity<FieldOfWork>(entity =>
        {
            entity.ToTable("FieldOfWork");

            entity.Property(e => e.FieldOfWorkId).ValueGeneratedNever();
            entity.Property(e => e.FieldOfWorkName).HasMaxLength(200);
        });

        modelBuilder.Entity<Identity>(entity =>
        {
            entity.ToTable("Identity");

            entity.Property(e => e.IdentityName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Identity_Name");
        });

        modelBuilder.Entity<MentorMentee>(entity =>
        {
            entity.ToTable("MentorMentee");

            entity.HasOne(d => d.Mentee).WithMany(p => p.MentorMenteeMentees)
                .HasForeignKey(d => d.MenteeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MentorMentee_Mentee");

            entity.HasOne(d => d.Mentor).WithMany(p => p.MentorMenteeMentors)
                .HasForeignKey(d => d.MentorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MentorMentee_Mentor");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Company).HasMaxLength(200);
            entity.Property(e => e.CurrentPosition).HasMaxLength(200);
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Degree).HasMaxLength(200);
            entity.Property(e => e.Email).HasMaxLength(200);
            entity.Property(e => e.FieldOfWorkId)
                .HasMaxLength(200)
                .HasColumnName("FieldOfWorkID");
            entity.Property(e => e.FirstName).HasMaxLength(200);
            entity.Property(e => e.Image).HasMaxLength(200);
            entity.Property(e => e.LastName).HasMaxLength(200);
            entity.Property(e => e.Password).HasMaxLength(200);
            entity.Property(e => e.School).HasMaxLength(200);

            entity.HasOne(d => d.Address).WithMany(p => p.Users)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_User_Address");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}